class Pelicula:
    """Representa una pel√≠cula con t√≠tulo, g√©nero y a√±o."""
    def __init__(self, titulo, genero, a√±o):
        self.titulo = titulo
        self.genero = genero
        self.a√±o = a√±o
    def __str__(self):
        """Devuelve una representaci√≥n en cadena del objeto Pelicula."""
        return f"'{self.titulo}' ({self.a√±o}) - G√©nero: {self.genero}"
class Catalogo:
    """Permite gestionar una colecci√≥n de pel√≠culas."""
    def __init__(self):
        self.peliculas = []
    def agregar_pelicula(self, pelicula):
        """Agrega una pel√≠cula al cat√°logo."""
        self.peliculas.append(pelicula)
        print(f"‚úÖ Pel√≠cula '{pelicula.titulo}' agregada al cat√°logo.")
    def listar_todas(self):
        """Lista todas las pel√≠culas del cat√°logo."""
        print("\nüé¨ Listado de todas las pel√≠culas:")
        if not self.peliculas:
            print("El cat√°logo est√° vac√≠o.")
        else:
            for pelicula in self.peliculas:
                print(f"- {pelicula}")
    def buscar_por_titulo(self, titulo):
        """Busca una pel√≠cula por su t√≠tulo (sin distinguir may√∫sculas y min√∫sculas)."""
        for pelicula in self.peliculas:
            if pelicula.titulo.lower() == titulo.lower():
                print(f"‚úÖ Pel√≠cula encontrada: {pelicula}")
                return pelicula
        print(f"‚ùå No se encontr√≥ la pel√≠cula con el t√≠tulo '{titulo}'.")
        return None
    def filtrar_por_genero(self, genero):
        """Filtra y lista las pel√≠culas por un g√©nero espec√≠fico."""
        peliculas_encontradas = [
            p for p in self.peliculas if p.genero.lower() == genero.lower()
        ]
        print(f"\nüé¨ Pel√≠culas encontradas para el g√©nero '{genero}':")
        if not peliculas_encontradas:
            print("No se encontraron pel√≠culas para este g√©nero.")
        else:
            for pelicula in peliculas_encontradas:
                print(f"- {pelicula}")
        return peliculas_encontradas